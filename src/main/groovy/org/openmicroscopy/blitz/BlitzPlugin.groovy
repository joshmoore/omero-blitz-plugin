package org.openmicroscopy.blitz

import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.artifacts.DependencySet
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.api.file.CopySpec
import org.gradle.api.file.FileTree
import org.gradle.api.logging.Logging
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.SourceSet
import org.gradle.api.tasks.TaskProvider
import org.openmicroscopy.blitz.tasks.CombinedFileTask
import org.openmicroscopy.dsl.DslPlugin
import org.openmicroscopy.dsl.DslPluginBase
import org.openmicroscopy.dsl.extensions.VelocityExtension
import org.openmicroscopy.dsl.tasks.DslBaseTask
import org.openmicroscopy.dsl.tasks.DslMultiFileTask

class BlitzPlugin implements Plugin<Project> {

    private static final def Log = Logging.getLogger(BlitzPlugin)

    private static final def patternXml = "**/*.ome.xml"

    private static final def patternType = "**/*-types.properties"

    private TaskProvider<Copy> importMappings

    private TaskProvider<Copy> importDatabaseTypes

    private TaskProvider<CombinedFileTask> generateCombinedFiles

    @Override
    void apply(Project project) {
        if (project.plugins.withType(DslPlugin)) {
            throw new GradleException("DSL plugin overrides Blitz conventions")
        }

        // Apply the base dsl plugin, we set new conventions for it here.
        project.plugins.apply(DslPluginBase)

        // Apply the base blitz plugin
        project.plugins.apply(BlitzPluginBase)

        registerBasicTasks(project)
        configureConventions(project)
        configureForJavaPlugin(project)
        configureImportMappingsTask(project)
        configureForDslPlugin(project)
    }

    void registerBasicTasks(Project project) {
        importMappings = project.tasks.register("importMappings", Copy) {
            group = BlitzPluginBase.GROUP
        }

        importDatabaseTypes = project.tasks.register("importDatabaseTypes", Copy) {
            group = BlitzPluginBase.GROUP
        }

        generateCombinedFiles = project.tasks.register('generateCombinedFiles', DslMultiFileTask) {
            group = BlitzPluginBase.GROUP
            description = "Processes combined.vm and generates .combined files"
            dependsOn importMappings, importDatabaseTypes
            databaseTypes importDatabaseTypes
            omeXmlFiles importMappings
            outputDir = project.blitz.combinedDir
            template = project.blitz.template
            databaseType = project.blitz.databaseType
            formatOutput = { st -> "${st.getShortname()}I.combined" }
            velocityProperties = new VelocityExtension(project).data.get()
        }
    }

    void configureConventions(Project project) {
        // Set default dir for files generated by .combined files
        project.blitz.outputDir = "src/generated"

        // Set a default for .combined file output
        project.blitz.combinedDir = "${project.buildDir}/combined"
    }

    /**
     * Creates task to extract .ome.xml files from omero-model
     * and place them in {@code omeXmlDir}
     * @param project
     * @return
     */
    void configureImportMappingsTask(Project project) {
        // After project configurations have been evaluated, we look for or add omero-model.jar
        project.afterEvaluate {
            def omeroModelArtifact = getOmeroModelArtifact(project)
            if (!omeroModelArtifact) {
                throw new GradleException('Can\'t find omero-model artifact')
            }

            def omeroModelFiles = project.zipTree(omeroModelArtifact.file)

            // Register extract ome.xml from omero-model task
            importMappings.configure {
                into "$project.buildDir/mappings"
                with createImportMappingsSpec(project, omeroModelFiles)
            }

            importDatabaseTypes.configure {
                into "$project.buildDir/properties"
                with createImportDatabaseTypesSpec(project, omeroModelFiles)
            }
        }
    }

    void configureForJavaPlugin(Project project) {
        // Configure default outputDir
        project.plugins.withType(JavaPlugin) { JavaPlugin java ->
            JavaPluginConvention javaConvention =
                    project.convention.getPlugin(JavaPluginConvention)

            SourceSet main =
                    javaConvention.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)

            main.java.srcDirs "${project.blitz.outputDir}/java"
            main.resources.srcDirs "${project.blitz.outputDir}/resources"
        }
    }

    void configureForDslPlugin(Project project) {
        project.plugins.withType(DslPluginBase) { DslPluginBase dsl ->
            // Override convention of dsl
            project.dsl.omeXmlFiles =
                    project.fileTree(dir: "$project.buildDir/mappings", include: "**/*.ome.xml")

            project.dsl.databaseTypes =
                    project.fileTree(dir: "$project.buildDir/properties", include: "**/*-types.properties")

            project.dsl.templates =
                    project.fileTree(dir: "src/main/resources/templates", include: "**/*.vm")

            // Set any DSL tasks to depend on import tasks
            project.tasks.withType(DslBaseTask).configureEach { DslBaseTask task ->
                task.dependsOn importMappings, importDatabaseTypes
            }        

            // CompileJava depends on all dsl tasks to run first
            project.plugins.withType(JavaPlugin) { JavaPlugin java ->
                project.tasks.named("compileJava").configure { task ->
                        task.dependsOn project.tasks.withType(DslBaseTask)
                }
            }        
        }
    }

    private CopySpec createImportMappingsSpec(Project project, FileTree artifactTree) {
        return project.copySpec {
            from artifactTree
            include patternXml
            includeEmptyDirs false
            // Flatten the hierarchy by setting the path
            // of all files to their respective basename
            eachFile { path = name }
        }
    }

    private CopySpec createImportDatabaseTypesSpec(Project project, FileTree artifactTree) {
        return project.copySpec {
            from artifactTree
            include patternType
            includeEmptyDirs false
            // Flatten the hierarchy by setting the path
            // of all files to their respective basename
            eachFile { path = name }
        }
    }

    private def getOmeroModelArtifact(Project project) {
        def artifact = getOmeroModelFromCompileConfig(project)
        if (artifact) {
            Log.info("omero-model found as a dependency")
            return artifact
        } else {
            Log.info("Adding omero-model as a dependency to obtain ome.xml files")
            return getOmeroModelWithCustomConfig(project)
        }
    }

    private ResolvedArtifact getOmeroModelFromCompileConfig(Project project) {
        def resolvableConfigs = project.configurations.findAll { it.canBeResolved }
        def artifact = null
        for (config in resolvableConfigs) {
            artifact = config.resolvedConfiguration.resolvedArtifacts.find { item ->
                item.name.contains("omero-model")
            }
            if (artifact) {
                break
            }
        }
        return artifact
    }

    private ResolvedArtifact getOmeroModelWithCustomConfig(Project project) {
        final def hiddenConfigName = 'omeXmlFiles'

        def config = project.configurations.findByName(hiddenConfigName)
        if (!config) {
            config = project.configurations.create(hiddenConfigName)
                    .setVisible(false)
                    .setDescription("The data artifacts to be processed for this plugin.");
        }

        def omeroModelVersion = project.blitz.modelVersion
        if (config.dependencies.empty) {
            config.defaultDependencies { DependencySet dependencies ->
                dependencies.add project.dependencies.create("org.openmicroscopy:omero-model:${omeroModelVersion}")
            }
        }

        return config.resolvedConfiguration
                .resolvedArtifacts
                .find { item -> item.name.contains("omero-model") }
    }

}

