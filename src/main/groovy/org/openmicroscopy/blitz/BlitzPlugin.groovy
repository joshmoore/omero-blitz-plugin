package org.openmicroscopy.blitz

import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.artifacts.DependencySet
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.api.file.CopySpec
import org.gradle.api.file.FileTree
import org.gradle.api.logging.Logging
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.SourceSet
import org.gradle.api.tasks.TaskProvider
import org.openmicroscopy.blitz.tasks.CombinedFileTask
import org.openmicroscopy.dsl.extensions.VelocityExtension

class BlitzPlugin implements Plugin<Project> {

    private static final def Log = Logging.getLogger(BlitzPlugin)

    @Override
    void apply(Project project) {
        // Apply the base blitz plugin
        project.plugins.apply(BlitzPluginBase)

        project.blitz.omeXmlFiles = project.fileTree(
                dir: "${project.buildDir}/mappings",
                include: "**/*.ome.xml"
        )

        configureDefaultCombinedDir(project)
        configureImportMappingsTask(project)
        configureForJavaPlugin(project)
    }

    void configureDefaultCombinedDir(Project project) {
        // Set a default for .combined file output
        project.blitz.combinedDir = "${project.buildDir}/combined"
    }

    /**
     * Creates task to extract .ome.xml files from omero-model
     * and place them in {@code omeXmlDir}
     * @param project
     * @return
     */
    void configureImportMappingsTask(Project project) {

        TaskProvider<Copy> importMappings = project.tasks.register("importMappings", Copy) {
            group = BlitzPluginBase.GROUP
        }

        TaskProvider<Copy> importDatabaseTypes = project.tasks.register("importDatabaseTypes", Copy) {
            group = BlitzPluginBase.GROUP
        }

        // After project configurations have been evaluated, we look for or add omero-model.jar
        project.afterEvaluate {
            def omeroModelArtifact = getOmeroModelArtifact(project)
            if (!omeroModelArtifact) {
                throw new GradleException('Can\'t find omero-model artifact')
            }

            def fileTree = project.zipTree(omeroModelArtifact.file)

            // Register extract ome.xml from omero-model task
            importMappings.configure {
                into "$project.buildDir/mappings"
                with createImportMappingsSpec(project, fileTree)
            }

            importDatabaseTypes.configure {
                into "$project.buildDir/properties"
                with createImportDatabaseTypesSpec(project, fileTree)
            }

            // Configure generateCombinedFiles task to depend on importOmeXmlTask
            project.tasks.register('generateCombinedFiles', CombinedFileTask) {
                group = BlitzPluginBase.GROUP
                description = "Processes combined.vm and generates .combined files"
                dependsOn importMappings, importDatabaseTypes
                databaseTypes importDatabaseTypes
                omeXmlFiles importMappings
                outputDir = project.blitz.combinedDir
                template = project.blitz.template
                databaseType = project.blitz.databaseType
                formatOutput = { st -> "${st.getShortname()}I.combined" }
                velocityProperties = new VelocityExtension(project).data.get()
            }
        }
    }

    CopySpec createImportMappingsSpec(Project project, FileTree artifactTree) {
        return project.copySpec {
            from artifactTree
            include "**/*.ome.xml"
            includeEmptyDirs false
            // Flatten the hierarchy by setting the path
            // of all files to their respective basename
            eachFile { path = name }
        }
    }

    CopySpec createImportDatabaseTypesSpec(Project project, FileTree artifactTree) {
        return project.copySpec {
            from artifactTree
            include "**/*-types.properties"
            includeEmptyDirs false
            // Flatten the hierarchy by setting the path
            // of all files to their respective basename
            eachFile { path = name }
        }
    }


    void configureForJavaPlugin(Project project) {
        // Configure default outputDir
        project.plugins.withType(JavaPlugin) { JavaPlugin java ->
            // Set default dir for files generated by .combined files
            project.blitz.outputDir = "src/generated"

            JavaPluginConvention javaConvention =
                    project.convention.getPlugin(JavaPluginConvention)

            SourceSet main =
                    javaConvention.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)

            main.java.srcDirs "${project.blitz.outputDir}/java"
            main.resources.srcDirs "${project.blitz.outputDir}/resources"
        }
    }

    private def getOmeroModelArtifact(Project project) {
        def artifact = getOmeroModelFromCompileConfig(project)
        if (artifact) {
            Log.info("omero-model found as a dependency")
            return artifact
        } else {
            Log.info("Adding omero-model as a dependency to obtain ome.xml files")
            return getOmeroModelWithCustomConfig(project)
        }
    }

    private ResolvedArtifact getOmeroModelFromCompileConfig(Project project) {
        def resolvableConfigs = project.configurations.findAll { it.canBeResolved }
        def artifact = null
        for (config in resolvableConfigs) {
            artifact = config.resolvedConfiguration.resolvedArtifacts.find { item ->
                item.name.contains("omero-model")
            }
            if (artifact) {
                break
            }
        }
        return artifact
    }

    private ResolvedArtifact getOmeroModelWithCustomConfig(Project project) {
        final def hiddenConfigName = 'omeXmlFiles'

        def config = project.configurations.findByName(hiddenConfigName)
        if (!config) {
            config = project.configurations.create(hiddenConfigName)
                    .setVisible(false)
                    .setDescription("The data artifacts to be processed for this plugin.");
        }

        def omeroModelVersion = project.properties['omeroModelVersion']
        if (config.dependencies.empty) {
            config.defaultDependencies { DependencySet dependencies ->
                dependencies.add project.dependencies.create("org.openmicroscopy:omero-model:${omeroModelVersion}")
            }
        }

        return config.resolvedConfiguration
                .resolvedArtifacts
                .find { item -> item.name.contains("omero-model") }
    }

}

